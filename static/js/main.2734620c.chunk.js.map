{"version":3,"sources":["componenets/Room.jsx","componenets/AddRoom.jsx","componenets/RoomWindow.jsx","App.js","serviceWorker.js","index.js"],"names":["Room","props","to","className","style","backgroundColor","color","display","onClick","addcurrentRoom","id","name","type","AddRoom","useState","setName","setColor","setType","onChange","e","target","value","width","placeholder","addRoom","Math","floor","random","RoomWindow","flag","setFlag","addProduct","addProducts","room","products","map","element","index","key","toggle","state","App","rooms","setRooms","currentRoom","setcurrentRoom","add","productIndex","clonedRooms","cloneDeep","selectedRoom","find","prod","roomsWithAdditionalProduct","margin","border","height","exact","path","component","fontStyle","fontSize","position","bottom","right","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2734620c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function Room(props) {\n\n    const addcurrentRoom = () => {\n        props.addcurrentRoom(props.id)\n    }\n\n    return (\n        <Link to='/room' >\n            <button className=\"col-2 card\" style={{ backgroundColor: props.color,display: 'inline' }}\n                onClick={addcurrentRoom}>\n                <h1>{props.name}</h1>\n                <h2>{props.type}</h2>\n            </button>\n        </Link>\n    )\n}\n","import { Link } from 'react-router-dom'\nimport React, { useState } from 'react'\n\n\nexport default function AddRoom(props) {\n\n    const [name, setName] = useState()\n    const [color, setColor] = useState()\n    const [type, setType] = useState()\n\n    const changeName = (e) => {\n        setName(e.target.value);\n    }\n    const changeColor = (e) => {\n        setColor(e.target.value);\n    }\n    const changeType = (e) => {\n        setType(e.target.value);\n    }\n\n    const addroom2 = () => {\n        props.addRoom({ name, color, type, id: Math.floor(Math.random()*10000)\n        })\n    }\n    \n\n    return (\n        <div>\n            <select onChange={changeType} className=\"browser-default custom-select\" style={{width:'300px'}}>\n                <option value=''>Select Room</option>\n                <option value=\"livingRoom\">Living Room</option>\n                <option value=\"BathRoom\">Bath Room</option>\n                <option value=\"Kitchen\">Kitchen</option>\n            </select><br />\n            <input onChange={changeName} type=\"text\" placeholder='Room Name' /><br />\n            <input onChange={changeColor} type=\"text\" placeholder='Room Color' /><br />\n            <Link to='./'><button style={{backgroundColor: 'blue'}} onClick={addroom2}>Add Room</button></Link>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\n\n\nexport default function RoomWindow(props) {\n\n  const [flag, setFlag] = useState(true)\n\n  const addProduct = (e) => {\n    props.addProducts(e.target.value);\n  }\n\n  const show = () => {\n    if (flag) {\n      return <div>\n        {props.room.products.map((element, index) =>\n          <div key={index}><button onClick={()=>props.toggle(index)} style={{ backgroundColor: element.state ? 'green' : 'red' }}>{element.name}</button></div>)}<br/>\n        <button onClick={() => setFlag(false)}>Add Product</button>\n      </div>\n    }\n\n    else {\n      return (\n        <div>\n          <select onChange={addProduct}>\n            <option value=''>Select Product</option>\n            <option value=\"Air Conditioner\">Air Conditioner</option>\n            <option value=\"Boiler\">Boiler</option>\n            <option value=\"Stereo System\">Stereo System</option>\n            <option value=\"Lamp\">Lamp</option>\n          </select>\n          <button onClick={() => setFlag(true)}>Add Product</button>\n        </div>\n      )\n    }\n  }\n\n\n  return (\n    <div>\n      <h1>name:{props.room.name}</h1><br />\n      <h2>type:{props.room.type}</h2><br />\n      {show()}\n    </div>\n  )\n}\n","import './App.css';\nimport React, { useState } from 'react'\nimport Room from './componenets/Room'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport AddRoom from './componenets/AddRoom'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport RoomWindow from './componenets/RoomWindow'\nimport cloneDeep from 'lodash.clonedeep';\n\n\nfunction App() {\n  const [rooms, setRooms] = useState([])\n  const [currentRoom, setcurrentRoom] = useState()\n\n  const add = ({ name, color, type, id }) => {\n    setRooms([{ name, color, type, id, products: [] }, ...rooms])\n  }\n\n  const addcurrentRoom = (id) => {\n    setcurrentRoom(id)\n  }\n\n  const toggle = (productIndex) => {\n    const clonedRooms = cloneDeep(rooms);\n    const selectedRoom = clonedRooms.find(({ id }) => id === currentRoom);\n    selectedRoom.products[productIndex].state = !selectedRoom.products[productIndex].state;\n    setRooms(clonedRooms);\n  }\n\n  const addProducts = (prod) => {\n    const roomsWithAdditionalProduct = [...rooms];\n    const selectedRoom = roomsWithAdditionalProduct.find(({ id }) => id === currentRoom);\n    selectedRoom.products = [{ name: prod, state: false }, ...selectedRoom.products];\n    setRooms(roomsWithAdditionalProduct);\n  }\n\n  const divStyle = {\n    margin: '40px',\n    border: '5px solid blue',\n    height: '550px'\n  }\n\n  return (\n    <div className=\"App\" style={divStyle}>\n      <h1>SMART HOUSE</h1>\n      {/* <ColorPicker view=\"palette\" defaultValue={'rgba(237, 126, 50, 1)'} /> */}\n      <Router>\n        <Switch>\n          <Route exact path='/room' component={() => <RoomWindow\n            addProducts={addProducts} room={rooms.find(({ id }) => id === currentRoom)} toggle={toggle} />} />\n          <Route exact path='/addroom' component={() => <AddRoom addRoom={add} />} />\n          <div >\n            <Route path='/' component={() =>\n              rooms.map((element) => <Room\n                name={element.name}\n                color={element.color}\n                type={element.type}\n                addcurrentRoom={addcurrentRoom}\n                id={element.id}\n                key={element.id} />)}\n            />\n          </div>\n        </Switch>\n\n        <Route exact path='/' component={() => <Link to='/addroom'>\n          <button style={{fontStyle: 'bold',fontSize: 44,color: 'white',position: 'absolute' ,bottom: '0',right: '600px', width: '150px', backgroundColor: 'blue'}}>+</button></Link>} />\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}